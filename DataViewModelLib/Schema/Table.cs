using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace DataViewModelLib.Schema
{
	public class Table : SchemaObject
	{
		
		public string Namespace { get; private set; }
		public string DatabaseName { get; private set; }
		public string TableName { get; private set; }


		public Column? PrimaryKey
		{
			get; 
			set;
		}

		public List<Column> Columns
		{
			get;
			private set;
		}
		public List<Relation> Relations
		{
			get;
			private set;
		}

		public Table(string Namespace, string DatabaseName, string TableName) : base()
		{
			this.Namespace = Namespace; this.DatabaseName = DatabaseName; this.TableName = TableName;
			this.Columns= new List<Column>();
			this.Relations = new List<Relation>();
		}
		public string GenerateDatabaseProperties()
		{
			string source =
			$$"""
			public List<{{TableName}}> {{TableName}}Table {get;set;}
			""";

			return source;
		}
		public string GenerateDatabaseConstructor()
		{
			string source =
			$$"""
			{{TableName}}Table = new List<{{TableName}}>();
			""";

			return source;
		}
		

		public string GenerateDatabaseModelMethods()
		{
			string removeMethod="";
			string cascadeActions = "";
			string getByPrivateKeyMethod = "";


			if (PrimaryKey != null) 
			{
				cascadeActions = string.Join("\r\n", Relations.Where(item => item.PrimaryTable == this).Select(item => item.GenerateCascadeActionSource()));

				removeMethod =
				$$"""
				public void Remove{{TableName}}({{TableName}}Model Item)
				{
					{{TableName}} dataSourceItem;
					int index;

					
					dataSourceItem=dataSource.{{TableName}}Table.First(item=>item.{{PrimaryKey.ColumnName}} == Item.{{PrimaryKey.ColumnName}});
					index=dataSource.{{TableName}}Table.IndexOf(dataSourceItem);
					dataSource.{{TableName}}Table.Remove(dataSourceItem);
				
				{{cascadeActions.Indent(1)}}

					if ({{TableName}}TableChanged != null) {{TableName}}TableChanged(dataSourceItem,TableChangedActions.Remove, index);
				}
				""";

				getByPrivateKeyMethod =
				$$"""
				public {{TableName}}Model Get{{TableName}}({{PrimaryKey.TypeName}} {{PrimaryKey.ColumnName}})
				{
					return Get{{TableName}}(item=>item.{{PrimaryKey.ColumnName}} == {{PrimaryKey.ColumnName}});
				}
				""";

			}

			string source =
			$$"""
			public {{TableName}}Model Get{{TableName}}(Func<{{TableName}},bool> Predicate)
			{
				return new {{TableName}}Model(this, dataSource.{{TableName}}Table.First(Predicate));
			}
			{{getByPrivateKeyMethod}}
			public IEnumerable<{{TableName}}Model> Get{{TableName}}Table()
			{
				return dataSource.{{TableName}}Table.Select(item=>new {{TableName}}Model(this, item));
			}
			public IEnumerable<{{TableName}}Model> Get{{TableName}}Table(Func<{{TableName}},bool> Predicate)
			{
				return dataSource.{{TableName}}Table.Where(Predicate).Select(item=>new {{TableName}}Model(this, item));
			}
			public void Add{{TableName}}({{TableName}} Item)
			{
				dataSource.{{TableName}}Table.Add(Item);
			}
			{{removeMethod}}


			public void Notify{{TableName}}RowChanged({{TableName}} Item,string PropertyName, object OldValue, object NewValue)
			{
				if ({{TableName}}RowChanged != null) {{TableName}}RowChanged(Item,PropertyName,OldValue,NewValue);
			}
			""";
			
			

			return source;
		}

		public string GenerateTableModelClass()
		{
			string source =
			$$"""
			// <auto-generated/>
			using System;
			using System.Collections.Generic;
			using System.Linq;
			using System.ComponentModel;

			namespace {{Namespace}}
			{
				public partial class {{TableName}}Model : INotifyPropertyChanged
				{
					public event PropertyChangedEventHandler PropertyChanged;

					private {{TableName}} dataSource
					{
						get;
						set;
					}

					private {{DatabaseName}}Model databaseModel;
			
			{{string.Join("\r\n", Columns.Select(item => item.GenerateTableModelProperties())).Indent(2)}}
			{{this.GenerateTableModelConstructor().Indent(2)}}
			
					private void OnRowChanged({{TableName}} Item, string PropertyName, object OldValue, object NewValue)
					{
						if (Item==dataSource) OnPropertyChanged(PropertyName);
					}

					protected virtual void OnPropertyChanged(string PropertyName)
					{
						if( PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
					}

			{{this.GenerateTableModelMethods().Indent(2)}}
				}
			}
			""";

			return source;
		}

		public string GenerateTableModelConstructor()
		{
			string source =
			$$"""
			public {{TableName}}Model({{DatabaseName}}Model DatabaseModel, {{TableName}} DataSource)
			{
				this.databaseModel=DatabaseModel;
				this.dataSource=DataSource;
				
				this.databaseModel.{{TableName}}RowChanged += OnRowChanged;
			}
			""";

			return source;
		}
		/*public string GenerateTableModelRelationEventHandlers()
		{
			string source = "";

			foreach (RelationModel relation in Relations)
			{
				source+=
				$$"""
				public void On{{relation.PrimaryTable.TableName}}RowChanged({{relation.PrimaryTable.TableName}} Item, string PropertyName, object OldValue, object NewValue)
				{
					if ((OldValue=={{relation.ForeignKey.ColumnName}}) || (NewValue=={{relation.ForeignKey.ColumnName}})) OnPropertyChanged({{relation.ForeignPropertyName}});
				}
				""";
			}

			return source;
		}*/

		public string GenerateTableModelMethods()
		{
			string source;

			if (PrimaryKey == null)
			{
				source=$$"""
				{{string.Join("\r\n", Relations.Select(item => item.GenerateTableModelMethods(this == item.PrimaryTable)))}}
				""";
			}
			else
			{
				source = $$"""
				public void Delete()
				{
					this.databaseModel.Remove{{TableName}}(this);
				}
				{{string.Join("\r\n", Relations.Select(item => item.GenerateTableModelMethods(this == item.PrimaryTable)))}}
				""";
			}

			return source;
		}

	}
}
