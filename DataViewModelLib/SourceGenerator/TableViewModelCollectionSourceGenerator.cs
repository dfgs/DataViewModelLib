using DataModelLib.Common;
using DataModelLib.Common.Schema;
using DataModelLib.Common.SourceGenerator;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataViewModelLib.SourceGenerator
{
	public class TableViewModelCollectionSourceGenerator : SourceGenerator<Table>
	{
		public override string GenerateSource(Table Table)
		{
			string source =
			$$"""
			// <auto-generated/>
			using System;
			using System.Collections;
			using System.Collections.Generic;
			using System.Collections.Specialized;
			using System.Linq;
			using System.ComponentModel;
			using System.Windows;
			using DataModelLib.Common;
			using {{Table.Namespace}}.Models;			
										
			namespace {{Table.Namespace}}.ViewModels
			{
				public partial class {{Table.TableName}}ViewModelCollection : IEnumerable<{{Table.TableName}}ViewModel>, INotifyCollectionChanged
				{
					#nullable enable
					public event NotifyCollectionChangedEventHandler? CollectionChanged;
					#nullable disable
						
					private {{Table.DatabaseName}}Model databaseModel;
					private List<{{Table.TableName}}ViewModel> items;

					public {{Table.TableName}}ViewModelCollection({{Table.DatabaseName}}Model DatabaseModel, IEnumerable<{{Table.TableName}}Model> Items)
					{
						this.databaseModel=DatabaseModel; 
						this.items=new List<{{Table.TableName}}ViewModel>();
						this.items.AddRange( Items.Select( item => new {{Table.TableName}}ViewModel(databaseModel, item) ));

						this.databaseModel.{{Table.TableName}}TableChanged += On{{Table.TableName}}TableChanged;
					}

					protected virtual void On{{Table.TableName}}TableChanged({{Table.TableName}} Item,TableChangedActions Action, int Index)
					{
						// todo
					}

					#region IEnumerable
					public IEnumerator<{{Table.TableName}}ViewModel> GetEnumerator()
					{
						return items.GetEnumerator();
					}
					IEnumerator IEnumerable.GetEnumerator()
					{
						return items.GetEnumerator();
					}
					#endregion
					
					#region INotifyCollectionChanged
					protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
					{
						if (CollectionChanged != null) CollectionChanged(this, e);
					}
					#endregion
			
				}
			}
			""";

			return source;
		}

	}
}
