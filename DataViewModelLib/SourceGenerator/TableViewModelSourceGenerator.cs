using DataModelLib.Common;
using DataModelLib.Common.Schema;
using DataModelLib.Common.SourceGenerator;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataViewModelLib.SourceGenerator
{
	public class TableViewModelSourceGenerator : SourceGenerator<Table>
	{
		public override string GenerateSource(Table Table)
		{
			string source =
			$$"""
			// <auto-generated/>
			using System;
			using System.Collections.Generic;
			using System.Linq;
			using System.ComponentModel;
			using System.Windows;
			using DataModelLib.Common;
			using {{Table.Namespace}}.Models;			
			
			namespace {{Table.Namespace}}.ViewModels
			{
				public partial class {{Table.TableName}}ViewModel : DependencyObject, INotifyPropertyChanged
				{
					public event PropertyChangedEventHandler? PropertyChanged;

					private {{Table.TableName}}Model dataSource
					{
						get;
						set;
					}

					private {{Table.DatabaseName}}ViewModel databaseViewModel;
			
			{{Table.Columns.Select(item => GenerateProperty(item)).Join().Indent(2)}}

					public {{Table.TableName}}ViewModel({{Table.DatabaseName}}ViewModel DatabaseViewModel,{{Table.TableName}}Model DataSource)
					{
						this.databaseViewModel=DatabaseViewModel; this.dataSource=DataSource;
					}

					protected virtual void OnPropertyChanged(string PropertyName)
					{
						if (PropertyChanged!=null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
					}
			
				}
			}
			""";

			return source;
		}

		private string GenerateProperty(Column Column)
		{
			string source =
			$$"""
			public {{Column.TypeName}} {{Column.ColumnName}}
			{
				get { return dataSource.{{Column.ColumnName}}; }
				set { dataSource.{{Column.ColumnName}} = value; OnPropertyChanged("{{Column.ColumnName}}"); }
			}
			""";
			return source;
		}

	}
}
