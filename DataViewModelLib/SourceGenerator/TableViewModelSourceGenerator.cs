using DataModelLib.Common;
using DataModelLib.Common.Schema;
using DataModelLib.Common.SourceGenerator;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataViewModelLib.SourceGenerator
{
	public class TableViewModelSourceGenerator : SourceGenerator<Table>
	{
		public override string GenerateSource(Table Table)
		{
			string source =
			$$"""
			// <auto-generated/>
			using System;
			using System.Collections.Generic;
			using System.Linq;
			using System.ComponentModel;
			using System.Windows;
			using DataModelLib.Common;
			using {{Table.Namespace}}.Models;			
			
			namespace {{Table.Namespace}}.ViewModels
			{
				public partial class {{Table.TableName}}ViewModel : INotifyPropertyChanged
				{
					#nullable enable
					public event PropertyChangedEventHandler? PropertyChanged;
					#nullable disable
			
					private {{Table.TableName}}Model dataSource
					{
						get;
						set;
					}

					private {{Table.DatabaseName}}Model databaseModel;
			
			{{Table.Columns.Select(item => GenerateProperty(item)).Join().Indent(2)}}

					public {{Table.TableName}}ViewModel({{Table.DatabaseName}}Model DatabaseModel,{{Table.TableName}}Model DataSource)
					{
						this.databaseModel=DatabaseModel; this.dataSource=DataSource;
						this.databaseModel.{{Table.TableName}}RowChanged += OnRowChanged;
					}

					private void OnRowChanged({{Table.TableName}} Item, string PropertyName, object OldValue, object NewValue)
					{
						if (dataSource.IsModelOf(Item)) OnPropertyChanged(PropertyName);
					}

					protected virtual void OnPropertyChanged(string PropertyName)
					{
						if (PropertyChanged!=null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
					}
			
					public void Delete()
					{
						this.databaseModel.Remove{{Table.TableName}}(dataSource);
					}

				}
			}
			""";

			return source;
		}

		private string GenerateProperty(Column Column)
		{
			string source =
			$$"""
			public {{Column.TypeName}} {{Column.ColumnName}}
			{
				get { return dataSource.{{Column.ColumnName}}; }
				set { dataSource.{{Column.ColumnName}} = value; }
			}
			""";
			return source;
		}

	}
}
