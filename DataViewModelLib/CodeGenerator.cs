using DataModelLib.Common;
using DataModelLib.Common.Schema;
using DataViewModelLib.SourceGenerator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml.Linq;

namespace DataViewModelLib
{

	
	[Generator]
	public class CodeGenerator : BaseCodeGenerator
	{
		private const string IViewModelSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public interface IViewModel
			{
				void Delete();
			}
		}
		""";

		private const string IViewModelCollectionSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public interface IViewModelCollection
			{
				int Count
				{
					get;
				}
			}
		}
		""";

		private const string IAddViewModelCollectionSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public interface IAddViewModelCollection : IViewModelCollection
			{
				void Add(object Item);
			}
		}
		""";

		private const string IRemoveViewModelCollectionSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public interface IRemoveViewModelCollection : IViewModelCollection
			{
				void Remove(object Item);
			}
		}
		""";

		private const string IViewModelPropertySourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public interface IViewModelProperty 
			{
				string Name
				{
					get;
				}

				bool IsReadOnly
				{
					get;
				}
			}
		}
		""";

		private const string TextViewModelPropertySourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public abstract class TextViewModelProperty : IViewModelProperty
			{
		
				public string Name
				{
					get;
					private set;
				}
				public bool IsReadOnly
				{
					get;
					private set;
				}
				public TextViewModelProperty(string Name, bool IsReadOnly)
				{
					this.Name = Name;
					this.IsReadOnly = IsReadOnly;
				}
			}
			public class TextViewModelProperty<PropertyT> : TextViewModelProperty
			{
				private Func<PropertyT> getter;
				private Action<PropertyT> setter;

			

				public PropertyT Value
				{
					get => getter();
					set => setter(value);
				}

				public TextViewModelProperty(string Name,bool IsReadOnly, Func<PropertyT> Getter, Action<PropertyT> Setter) : base(Name, IsReadOnly)
				{
					this.getter = Getter;
					this.setter = Setter;
				}
			}
		}
		""";
		private const string ComboBoxViewModelPropertySourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public abstract class ComboBoxViewModelProperty : IViewModelProperty
			{
		
				public string Name
				{
					get;
					private set;
				}
				public bool IsReadOnly
				{
					get;
					private set;
				}
				public ComboBoxViewModelProperty(string Name, bool IsReadOnly)
				{
					this.Name = Name;
					this.IsReadOnly = IsReadOnly;
				}
			}
			public class ComboBoxViewModelProperty<PropertyT> : ComboBoxViewModelProperty
			{
				private Func<PropertyT> getter;
				private Action<PropertyT> setter;
				private Func<object> itemsSourceGetter;

				public string SelectedValuePath
				{
					get;
					private set;
				}

				public object ItemsSource
				{
					get => itemsSourceGetter();
				}
							

				public PropertyT Value
				{
					get => getter();
					set => setter(value);
				}

				public ComboBoxViewModelProperty(string Name,bool IsReadOnly,Func<object> ItemsSourceGetter, string SelectedValuePath, Func<PropertyT> Getter, Action<PropertyT> Setter) : base(Name, IsReadOnly)
				{
					this.getter = Getter;
					this.setter = Setter;
					this.itemsSourceGetter = ItemsSourceGetter;
					this.SelectedValuePath =SelectedValuePath;
				}
			}
		}
		""";
		protected override void OnRegisterStaticSources(IncrementalGeneratorInitializationContext context)
		{
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/IViewModel.g.cs", SourceText.From(IViewModelSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/IViewModelCollection.g.cs", SourceText.From(IViewModelCollectionSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/IAddViewModelCollection.g.cs", SourceText.From(IAddViewModelCollectionSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/IRemoveViewModelCollection.g.cs", SourceText.From(IRemoveViewModelCollectionSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/IViewModelProperty.g.cs", SourceText.From(IViewModelPropertySourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/TextViewModelProperty.g.cs", SourceText.From(TextViewModelPropertySourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Interfaces/ComboBoxViewModelProperty.g.cs", SourceText.From(ComboBoxViewModelPropertySourceCode, Encoding.UTF8)));

		}

		protected override void OnGenerateDynamicSources(SourceProductionContext context, Database database)
		{
			string source;
			DatabaseViewModelSourceGenerator databaseSourceViewModelGenerator;
			ViewModelSourceGenerator tableViewModelSourceGenerator;
			ViewModelCollectionSourceGenerator tableViewModelCollectionSourceGenerator;
			RelationViewModelCollectionSourceGenerator foreignTableViewModelCollectionSourceGenerator;

			databaseSourceViewModelGenerator = new DatabaseViewModelSourceGenerator();	
			tableViewModelSourceGenerator = new ViewModelSourceGenerator();
			tableViewModelCollectionSourceGenerator=new ViewModelCollectionSourceGenerator();
			foreignTableViewModelCollectionSourceGenerator = new RelationViewModelCollectionSourceGenerator();

			source = databaseSourceViewModelGenerator.GenerateSource(database);
			context.AddSource($"ViewModels/{database.DatabaseName}ViewModel.g.cs", SourceText.From(source, Encoding.UTF8));

			// On ajoute le code source des relations
			foreach (Table table in database.Tables)
			{
				foreach (Relation relation in table.Relations)
				{
					if (relation.PrimaryTable == table)
					{
						source = foreignTableViewModelCollectionSourceGenerator.GenerateSource(relation);
						context.AddSource($"ViewModels/{relation.PrimaryPropertyName}ViewModelCollection.g.cs", SourceText.From(source, Encoding.UTF8));
					}
				}
			}

			// On ajoute le code source des tables
			foreach(Table table in database.Tables)
			{
				source = tableViewModelSourceGenerator.GenerateSource(table);
				context.AddSource($"ViewModels/{table.TableName}ViewModel.g.cs", SourceText.From(source, Encoding.UTF8));
				source = tableViewModelCollectionSourceGenerator.GenerateSource(table);
				context.AddSource($"ViewModels/{table.TableName}ViewModelCollection.g.cs", SourceText.From(source, Encoding.UTF8));
			}
			


		}








	}
}