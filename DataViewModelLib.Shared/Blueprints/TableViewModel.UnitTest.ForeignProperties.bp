{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- dto= class | GetDTO }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using DataViewModelLib;
//
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}


namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
	
		#region {{dto}} table
		{{-if primaryKey}}
		
		{{-for relation in GetRelations | where_is_foreign }}
		[TestMethod]
		public void ShouldGet{{relation.ForeignPropertyName}}()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);
			Assert.IsNotNull(viewModel.{{relation.ForeignPropertyName}});
			Assert.AreEqual(viewModel.{{relation.ForeignKey}}, viewModel.{{relation.ForeignPropertyName}}.{{relation.PrimaryKey}});
		}	

		{{- if relation.ForeignKeyIsNullable}}
		[TestMethod]
		public void ShouldNotGet{{relation.ForeignPropertyName}}()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.First(item=>item.{{relation.ForeignKey}} is null);
			Assert.IsNull(viewModel.{{relation.ForeignPropertyName}});
		}			
		{{- end }}

		[TestMethod]
		public void ShouldRaise{{relation.ForeignPropertyName}}PropertyChanged()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;
			#nullable enable
			string? propertyName = null;
			#nullable disable
			
			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
		
			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);
			viewModel.PropertyChanged += (_, e) => { propertyName = e.PropertyName; };

			viewModel.{{relation.ForeignKey}} = 3;
			Assert.AreEqual("{{relation.ForeignPropertyName}}", propertyName);
			Assert.AreEqual(3, viewModel.{{relation.ForeignPropertyName}}.{{relation.PrimaryKey}});
		}
		{{- end }}
		
		{{-for relation in GetRelations | where_is_primary }}
		[TestMethod]
		public void ShouldGet{{relation.PrimaryPropertyName}}()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			var foreignViewModels = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0).{{relation.PrimaryPropertyName}}.ToArray();

			Assert.IsNotNull(foreignViewModels);
			Assert.AreNotEqual(0, foreignViewModels.Length);
		}	
		{{- end }}

		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}
	
		#endregion
			

	}
}
