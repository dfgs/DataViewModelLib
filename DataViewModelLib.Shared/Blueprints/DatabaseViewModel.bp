{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}


{{- databaseName = class | GetDTO }}
{{- if !databaseName}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}


{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using DataModelLib;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{

		{{- for class in project.classes | with_attribute "TableViewModelAttribute" }}
		{{-dto=class | GetDTO}}
		private Dictionary<Models.{{dto}}Model,{{dto}}ViewModel> {{class.name}}Dictionary;
		{{- end }}

		private Models.{{databaseName}}Model dataSource;

		#region generated properties
		{{- for class in project.classes | with_attribute "TableViewModelAttribute" }}
		{{-dto=class | GetDTO}}
		public {{dto}}ViewModelCollection {{dto}}ViewModelCollection
		{
			get;
			private set;
		}
		{{- end }}
		#endregion

		public {{class.name}}(Models.{{databaseName}}Model DataSource)
		{
			this.dataSource=DataSource;
	
			{{- for class in project.classes | with_attribute "TableViewModelAttribute" }}
			{{-dto=class | GetDTO}}
			{{dto}}Dictionary =  new Dictionary<Models.{{dto}}Model,{{dto}}ViewModel>();
			{{- end }}

			{{- for class in project.classes | with_attribute "TableViewModelAttribute" }}
			{{-dto=class | GetDTO}}
			{{dto}}ViewModelCollection =  new {{dto}}ViewModelCollection(this, dataSource);
			{{- end }}
		}

		{{- for class in project.classes | with_attribute "TableViewModelAttribute" }}
		{{-dto=class | GetDTO}}
		public {{dto}}ViewModel Create{{dto}}ViewModel(Models.{{dto}}Model Item)
		{
			{{dto}}ViewModel viewModel;
			
			if (Item==null) throw new ArgumentNullException(nameof(Item));

			if (!{{dto}}Dictionary.TryGetValue(Item,out viewModel))
			{
				viewModel=new {{dto}}ViewModel(this, dataSource, Item);
				{dto}}Dictionary.Add(Item,viewModel);
			}
			
			return viewModel;
		}
		{{- end }}


	}
}