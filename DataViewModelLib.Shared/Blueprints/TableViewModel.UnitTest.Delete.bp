{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}


{{- func GetRelations
	result = []

	for foreignclass in project.classes
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"
								
				dtoAttribute = foreignclass.attributes | find "DTOAttribute" 
				if (!dtoAttribute)
					continue
				end
				foreignTableName=(dtoAttribute.parameters | find "Name").value

				relation = { 
					ForeignTable: foreignTableName,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyType: property.type_name,
					ForeignKeyIsNullable: isnullable,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end -}}

{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==tableName
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==tableName
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- databaseClass = project.classes | with_attribute "DatabaseAttribute" | array.first}}
{{- if !databaseClass}}
#warning no Database attribute was set on unit test class
{{-ret}}
{{-end}}

{{- dtoAttribute = databaseClass.attributes | find "DTOAttribute"}}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{databaseClass.name}}
{{-ret}}
{{-end}}
{{- databaseName=(dtoAttribute.parameters | find "Name").value }}

{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{

		#region {{tableName}} table
		{{-if primaryKey}}
		
		[TestMethod]
		public void ShouldDelete()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{tableName}}ViewModel[] viewModels;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			// delete last item
			testDatabaseViewModel.{{tableName}}ViewModelCollection.ElementAt({{mockCount-1}}).Delete();
			viewModels = testDatabaseViewModel.{{tableName}}ViewModelCollection.ToArray();
			
			Assert.AreEqual({{mockCount-1}}, viewModels.Length);
			Assert.AreEqual(1, viewModels[0].{{primaryKey.name}});
		}

		[TestMethod]
		public void ShouldRaiseCollectionChangedOnDelete()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{tableName}}ViewModel[] viewModels;
			int changedIndex = -1;
			#nullable enable
			ViewModels.{{tableName}}ViewModel? changedItem = null;
			System.Collections.Specialized.NotifyCollectionChangedAction? changedAction = null;
			#nullable disable


			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			testDatabaseViewModel.{{tableName}}ViewModelCollection.CollectionChanged += (sender, e) => { changedItem = e.OldItems?[0] as ViewModels.{{tableName}}ViewModel; changedAction = e.Action; changedIndex = e.OldStartingIndex; }; ;

			// delete last item
			testDatabaseViewModel.{{tableName}}ViewModelCollection.ElementAt({{mockCount-1}}).Delete();
			viewModels = testDatabaseViewModel.{{tableName}}ViewModelCollection.ToArray();

			Assert.AreEqual({{mockCount-1}}, viewModels.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
		}

		
		[TestMethod]
		public void ShouldRemove()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{tableName}}ViewModel[] viewModels;
			ViewModels.{{tableName}}ViewModel item;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			// remove last item
			item=testDatabaseViewModel.{{tableName}}ViewModelCollection.ElementAt({{mockCount-1}});
			testDatabaseViewModel.{{tableName}}ViewModelCollection.Remove(item);

			viewModels = testDatabaseViewModel.{{tableName}}ViewModelCollection.ToArray();
			
			Assert.AreEqual({{mockCount-1}}, viewModels.Length);
			Assert.AreEqual(1, viewModels[0].{{primaryKey.name}});
		}
	
		[TestMethod]
		public void ShouldRaiseCollectionChangedOnRemove()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{tableName}}ViewModel[] viewModels;
			ViewModels.{{tableName}}ViewModel item;
			int changedIndex = -1;
			#nullable enable
			ViewModels.{{tableName}}ViewModel? changedItem = null;
			System.Collections.Specialized.NotifyCollectionChangedAction? changedAction = null;
			#nullable disable


			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			testDatabaseViewModel.{{tableName}}ViewModelCollection.CollectionChanged += (sender, e) => { changedItem = e.OldItems?[0] as ViewModels.{{tableName}}ViewModel; changedAction = e.Action; changedIndex = e.OldStartingIndex; }; ;

			// remove last item
			item=testDatabaseViewModel.{{tableName}}ViewModelCollection.ElementAt({{mockCount-1}});
			testDatabaseViewModel.{{tableName}}ViewModelCollection.Remove(item);

			viewModels = testDatabaseViewModel.{{tableName}}ViewModelCollection.ToArray();

			Assert.AreEqual({{mockCount-1}}, viewModels.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual(item, changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
		}

		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		

		#endregion

	}
}
