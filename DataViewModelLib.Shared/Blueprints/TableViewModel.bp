{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableViewModelAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_column_is_foreign
	

	for relation in $0
		if relation.ForeignTable==dto
			if relation.ForeignKey==$1
				ret relation
			end
		end
	end

	ret null
end -}}

{{- func group_by_foreign_table
	result = []

	for relation in $0
		
		groupedrelation=nil
		for item in result
			if item.ForeignTable == relation.ForeignTable
				groupedrelation=item
			end
		end
		if groupedrelation==null 
			groupedrelation = {
				ForeignTable: relation.ForeignTable,
				Relations: []
			}
			result = result + [groupedrelation]
		end
		groupedrelation.Relations = groupedrelation.Relations + [relation]
		
	end

	ret result
end -}}

{{- databaseViewModels = (project.classes  | with_attribute "DatabaseViewModelAttribute") }}
{{- databaseViewModel = databaseViewModels | array.first }}
{{- if !databaseViewModel  }}
#warning no DatabaseViewModel attribute defined in database view model class
{{-ret}}
{{-end}}
{{databaseName=databaseViewModel | GetDTO }}
{{- dto= class | GetDTO }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.ComponentModel;
using System.Windows;
using DataModelLib;
using DataViewModelLib;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}: IViewModel, INotifyPropertyChanged
	{
		#nullable enable
		public event PropertyChangedEventHandler? PropertyChanged;
		#nullable disable
			
		private Models.{{dto}}Model dataSource
		{
			get;
			set;
		}

		private List<IViewModelProperty> properties;
		public IEnumerable<IViewModelProperty> Properties
		{
			get => properties;
		}

		private Models.{{databaseName}}Model databaseModel;
		private {{databaseName}}ViewModel databaseViewModel;

		#region generated properties
		{{- for column in class.properties | with_attribute "Column" }}
		public {{column.type_name}} {{column.name}}
		{
			get { return dataSource.{{column.name}}; }
			set { dataSource.{{column.name}} = value; }
		}
		{{- end }}

		{{-for relation in GetRelations | where_is_primary }}
		private {{relation.PrimaryPropertyName}}ViewModelCollection _{{relation.PrimaryPropertyName}};
		public {{relation.PrimaryPropertyName}}ViewModelCollection {{relation.PrimaryPropertyName}}
		{
			get { return this._{{relation.PrimaryPropertyName}}; }
		}		
		{{- end }}

		{{-for relation in GetRelations | where_is_foreign }}
		private {{relation.PrimaryTable}}ViewModel _{{relation.ForeignPropertyName}};
		public {{relation.PrimaryTable}}ViewModel {{relation.ForeignPropertyName}}
		{
			get 
			{
				if (this._{{relation.ForeignPropertyName}}==null)
				{
					Models.{{relation.PrimaryTable}}Model model = dataSource.Get{{relation.ForeignPropertyName}}();
					if (model==null) return null;
					this._{{relation.ForeignPropertyName}} = databaseViewModel.Create{{relation.PrimaryTable}}ViewModel(model);
				}
				return this._{{relation.ForeignPropertyName}}; 
			}
		}		
		{{- end }}
		#endregion

		public {{class.name}}({{databaseName}}ViewModel DatabaseViewModel, Models.{{databaseName}}Model DatabaseModel, Models.{{dto}}Model DataSource)
		{
			this.databaseModel=DatabaseModel; 
			this.databaseViewModel=DatabaseViewModel; 
			this.dataSource=DataSource;

			// generate view model properties
			this.properties=new List<IViewModelProperty>();

			{{- for column in class.properties | with_attribute "Column" }}
			{{- displayName = (((column.attributes  | find "Column").parameters ) | find "DisplayName")?.value ?? column.name }}
			{{- readOnly = column.attributes | contains "PrimaryKey" }}
			{{- relation = GetRelations | where_column_is_foreign column.name }}
			{{- if relation }}
			properties.Add( new ComboBoxViewModelProperty<{{column.type_name}}>("{{displayName}}", {{readOnly}}, ()=>databaseViewModel.{{relation.PrimaryTable}}ViewModelCollection ,"{{relation.PrimaryKey}}" , () => this.{{column.name}}, (val) => this.{{column.name}}=val ) );
			{{- else}}
			properties.Add( new TextViewModelProperty<{{column.type_name}}>("{{displayName}}", {{readOnly}}, () => this.{{column.name}}, (val) => this.{{column.name}}=val ) );
			{{- end}}
			{{- end }}

			//

			{{-for relation in GetRelations | where_is_primary }}
			this._{{relation.PrimaryPropertyName}} = new {{relation.PrimaryPropertyName}}ViewModelCollection(databaseViewModel, databaseModel, dataSource);
			{{- end }}
			
			{{-for relation in GetRelations | where_is_foreign }}
			this.dataSource.{{relation.ForeignPropertyName}}Changed += On{{relation.ForeignPropertyName}}Changed;
			{{- end }}

			DataSource.PropertyChanged += OnModelPropertyChanged;
		}

		#region relation methods
		{{-for relation in GetRelations | where_is_foreign }}
		private void On{{relation.ForeignPropertyName}}Changed(object sender, EventArgs e)
		{
			this._{{relation.ForeignPropertyName}} = null;
			OnPropertyChanged(nameof({{relation.ForeignPropertyName}}));
		}
		{{- end }}
		#endregion

		private void OnModelPropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			OnPropertyChanged(e.PropertyName);
		}

		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if (PropertyChanged!=null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}
			
		public void Delete()
		{
			this.databaseModel.Remove{{dto}}(dataSource);
		}
		public override string ToString()
		{
			return dataSource.ToString();
		}


	}
}