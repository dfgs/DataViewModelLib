{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableViewModelAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func group_by_foreign_table
	result = []

	for relation in $0
		
		groupedrelation=nil
		for item in result
			if item.ForeignTable == relation.ForeignTable
				groupedrelation=item
			end
		end
		if groupedrelation==null 
			groupedrelation = {
				ForeignTable: relation.ForeignTable,
				Relations: []
			}
			result = result + [groupedrelation]
		end
		groupedrelation.Relations = groupedrelation.Relations + [relation]
		
	end

	ret result
end -}}

{{- databaseViewModels = (project.classes  | with_attribute "DatabaseViewModelAttribute") }}
{{- databaseViewModel = databaseViewModels | array.first }}
{{- if !databaseViewModel  }}
#warning no DatabaseViewModel attribute defined in database view model class
{{-ret}}
{{-end}}
{{databaseName=databaseViewModel | GetDTO }}
{{- dto= class | GetDTO }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.ComponentModel;
using System.Windows;
using DataModelLib;
using DataViewModelLib;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}
namespace {{class.namespace}}
{
	public partial class {{dto}}ViewModelCollection : IViewModelCollection, IAddViewModelCollection, IRemoveViewModelCollection, IEnumerable<{{dto}}ViewModel>, INotifyPropertyChanged, INotifyCollectionChanged
	{
		#nullable enable
		public event PropertyChangedEventHandler? PropertyChanged;
		public event NotifyCollectionChangedEventHandler? CollectionChanged;

		private {{dto}}ViewModel? selectedItem;
		public {{dto}}ViewModel? SelectedItem
		{
			get => selectedItem;
			set { selectedItem=value; OnPropertyChanged("SelectedItem"); }
		}
		#nullable disable
						
		private Models.{{databaseName}}Model databaseModel;
		private {{databaseName}}ViewModel databaseViewModel;
			
		private List<{{dto}}ViewModel> items;
		public int Count
		{
			get => items.Count;
		}

		public {{dto}}ViewModelCollection({{databaseName}}ViewModel DatabaseViewModel, Models.{{databaseName}}Model DatabaseModel)
		{
			this.databaseModel=DatabaseModel; 
			this.databaseViewModel=DatabaseViewModel; 
			
			this.items=new List<{{dto}}ViewModel>();
			this.items.AddRange( databaseModel.Get{{dto}}Table().Select( item => databaseViewModel.Create{{dto}}ViewModel(item) ));
			
			this.databaseModel.{{dto}}TableChanged += On{{dto}}TableChanged;
		}

		protected virtual void On{{dto}}TableChanged(Tables.{{dto}} Item, DataLib.TableChangedActions Action, int Index)
		{
			{{dto}}ViewModel item;
						
			switch(Action)
			{
				case DataLib.TableChangedActions.Remove:
					item=items[Index];		
					items.RemoveAt(Index);
					OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item, Index));
					break;
				case DataLib.TableChangedActions.Add:
					item = databaseViewModel.Create{{dto}}ViewModel(databaseModel.Create{{dto}}Model(Item));
					items.Insert(Index,item);
					OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item, Index));
					break;
				default:
					break;
			}
		}
			
		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if (PropertyChanged!=null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}
			

		#region IEnumerable
		public IEnumerator<{{dto}}ViewModel> GetEnumerator()
		{
			return items.GetEnumerator();
		}
		IEnumerator IEnumerable.GetEnumerator()
		{
			return items.GetEnumerator();
		}
		#endregion
					
		#region INotifyCollectionChanged
		protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
		{
			if (CollectionChanged != null) CollectionChanged(this, e);
		}
		#endregion
			
		public void Remove({{dto}}ViewModel Item)
		{
			Item.Delete();
		}

		public void Add(Tables.{{dto}} Item)
		{
			databaseModel.Add{{dto}}(Item);
		}

		void IAddViewModelCollection.Add(object Item)
		{
			#nullable enable
			{{dto}}? convertedItem;
			#nullable disable
			
			convertedItem = Item as {{dto}};
			if (convertedItem==null) return;
			Add(convertedItem);
		}

		void IRemoveViewModelCollection.Remove(object Item)
		{
			#nullable enable
			{{dto}}ViewModel? convertedItem;
			#nullable disable
			
			convertedItem = Item as {{dto}}ViewModel;
			if (convertedItem==null) return;
			Remove(convertedItem);
		}

	}
}