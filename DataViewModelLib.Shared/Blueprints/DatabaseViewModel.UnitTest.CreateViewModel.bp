{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- dto= class | GetDTO }}


{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using DataViewModelLib;
//
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}




namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for tableClass in project.classes  | with_attribute "TableAttribute"}}
		{{- dto= class | GetDTO }}
		{{- mockCount = GetMockCount tableClass }}
		{{-primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first}}
		
#region {{dto}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldNotCreateUnique{{dto}}ViewModel()
		{
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{databaseName}}Model testDatabaseModel;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);
			// provided parameter should not be null
			Assert.ThrowsException<ArgumentNullException>(()=> testDatabaseModel.Create{{dto}}Model(null));
		}
		[TestMethod]
		public void ShouldCreateUnique{{dto}}ViewModel()
		{
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{databaseName}}Model testDatabaseModel;
			{{dto}}Model new{{dto}}1, new{{dto}}2;
			{{dto}}ViewModel viewModel1, viewModel2, viewModel3;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			new{{dto}}1 = testDatabaseModel.Create{{dto}}Model(MockDatabase.Create{{dto}}({{mockCount+1}}));
			new{{dto}}2 = testDatabaseModel.Create{{dto}}Model(MockDatabase.Create{{dto}}({{mockCount+2}}));
	
			// create a model from new{{dto}}1 
			viewModel1 = testDatabaseViewModel.Create{{dto}}ViewModel(new{{dto}}1);
			// try to create another model from new{{dto}}1 
			viewModel2 = testDatabaseViewModel.Create{{dto}}ViewModel(new{{dto}}1);
			// create a model from new{{dto}}2
			viewModel3 = testDatabaseViewModel.Create{{dto}}ViewModel(new{{dto}}2);
			// viewModel1 and viewModel2 should be equal, because they were created from same item
			Assert.AreEqual(viewModel1, viewModel2);
			// viewModel1 and viewModel3 should not be equal, because they were not created from same item
			Assert.AreNotEqual(viewModel1, viewModel3);
			// viewModel2 and viewModel3 should not be equal, because they were not created from same item
			Assert.AreNotEqual(viewModel2, viewModel3);
		}
		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}		
#endregion
		{{- end }}
		

	}
}
