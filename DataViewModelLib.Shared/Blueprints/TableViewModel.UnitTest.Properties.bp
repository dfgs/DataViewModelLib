{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- dto= class | GetDTO }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using DataViewModelLib;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}



namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
	
		#region {{dto}} table
		{{-if primaryKey}}
		
		[TestMethod]
		public void ShouldGetSetProperty()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);

			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			Assert.AreEqual("{{property.name}}1", viewModel.{{property.name}});
			viewModel.{{property.name}} = "Changed";
			Assert.AreEqual("Changed", viewModel.{{property.name}});
			{{-else if property.type_name=="bool"}}
			Assert.IsFalse( viewModel.{{property.name}});
			viewModel.{{property.name}} = true;
			Assert.IsTrue( viewModel.{{property.name}});
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			Assert.AreEqual(({{property.type_name}})1, viewModel.{{property.name}});
			viewModel.{{property.name}} = 2;
			Assert.AreEqual(({{property.type_name}})2, viewModel.{{property.name}});
			{{-end}}

			{{-end}}
			{{end}}
		}
		
		[TestMethod]
		public void ShouldRaisePropertyChangedEvent()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);
			viewModel.PropertyChanged += (_, e) => { propertyName = e.PropertyName; };


			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			viewModel.{{property.name}} = "Changed";
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-else if property.type_name=="bool"}}
			viewModel.{{property.name}} = true;
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			viewModel.{{property.name}} = 2;
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-end}}

			{{-end}}
			{{end}}
		}
		
		[TestMethod]
		public void ShouldNotRaisePropertyChangedEvent()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel viewModel;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			viewModel = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);
			viewModel.PropertyChanged += (_, e) => { Assert.Fail(); };


			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			viewModel.{{property.name}} = "{{property.name}}1";
			Assert.IsNull(propertyName);
			{{-else if property.type_name=="bool"}}
			viewModel.{{property.name}} = false;
			Assert.IsNull(propertyName);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			viewModel.{{property.name}} = 1;
			Assert.IsNull(propertyName);
			{{-end}}

			{{-end}}
			{{end}}
		}

		[TestMethod]
		public void ShouldGetSetSelectedItem()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			testDatabaseViewModel.{{dto}}ViewModelCollection.PropertyChanged += (_, e) => { propertyName = e.PropertyName; };

			Assert.IsNull(testDatabaseViewModel.{{dto}}ViewModelCollection.SelectedItem);
			testDatabaseViewModel.{{dto}}ViewModelCollection.SelectedItem = testDatabaseViewModel.{{dto}}ViewModelCollection.ElementAt(0);
			Assert.IsNotNull(testDatabaseViewModel.{{dto}}ViewModelCollection.SelectedItem);
			Assert.AreEqual(1, testDatabaseViewModel.{{dto}}ViewModelCollection.SelectedItem.{{primaryKey.name}});
			Assert.AreEqual("SelectedItem", propertyName);
			
		}

		[TestMethod]
		public void ShouldCreateViewModelProperties()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			IViewModelProperty[] properties;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			properties = testDatabaseViewModel.{{dto}}ViewModelCollection.First().Properties.ToArray();

			{{-counter=0}}
			Assert.AreEqual({{class.properties | with_attribute "Column" | array.size}}, properties.Length);
			{{-for property in class.properties | with_attribute "Column" }}
			{{- displayName = (((property.attributes  | find "Column").parameters ) | find "DisplayName")?.value ?? property.name }}
			Assert.AreEqual("{{displayName}}", properties[{{counter++}}].Name);
			{{-end}}
		}

		

		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}
	
		#endregion
			

	}
}
