{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}
{{- dto= class | GetDTO }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.ComponentModel;
using System.Windows;
using DataModelLib;
using DataViewModelLib;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}

namespace {{class.namespace}}
{

	{{-for relation in GetRelations}}

	[TestClass]
	public partial class {{relation.PrimaryPropertyName}}ViewModelCollectionUnitTest 
	{
		
		[TestMethod]
		public void ShouldRaiseTableChangedOnRemove()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			ViewModels.{{databaseName}}ViewModel testDatabaseViewModel;
			ViewModels.{{relation.PrimaryTable}}ViewModel[] viewModels;
			ViewModels.{{relation.PrimaryTable}}ViewModel item;
			object? changedItem = null;
			int changedIndex = -1;
			int count;
			NotifyCollectionChangedAction? changedAction = null;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0).{{relation.PrimaryPropertyName}}.CollectionChanged += (sender, e) => { changedItem = e.OldItems?[0]; changedAction = e.Action; changedIndex = e.OldStartingIndex; }; ;
			count=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0).{{relation.PrimaryPropertyName}}.Count();

			item = testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(1);
			testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.Remove(item);

			viewModels = testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.ElementAt(0).{{relation.PrimaryPropertyName}}.ToArray();
			Assert.AreEqual(count-1, viewModels.Length);

			Assert.IsNotNull(changedItem);
			Assert.AreEqual(1, ((ViewModels.{{relation.ForeignTable}}ViewModel)changedItem).{{relation.ForeignKey}});
			Assert.AreEqual(1, changedIndex);
		}
		


	}
	{{-end}}
}