{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}
{{- dto= class | GetDTO }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.ComponentModel;
using System.Windows;
using DataModelLib;
using DataViewModelLib;
//
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}


namespace {{class.namespace}}
{

	{{-for relation in GetRelations}}

	[TestClass]
	public partial class {{relation.PrimaryPropertyName}}ViewModelCollectionUnitTest 
	{
		
		[TestMethod]
		public void ShouldRaiseTableChangedOnRemove()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.ForeignTable}}ViewModel[] viewModels;
			{{relation.ForeignTable}}ViewModel itemToDelete;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			#nullable enable
			object? changedItem = null;
			NotifyCollectionChangedAction? changedAction = null;
			#nullable disable
			int changedIndex = -1;
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);
			primaryItem.{{relation.PrimaryPropertyName}}.CollectionChanged += (sender, e) => { changedItem = e.OldItems?[0]; changedAction = e.Action; changedIndex = e.OldStartingIndex; };
			count=primaryItem.{{relation.PrimaryPropertyName}}.Count();

			itemToDelete = primaryItem.{{relation.PrimaryPropertyName}}.ElementAt(0);
			testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.Remove(itemToDelete);

			viewModels = primaryItem.{{relation.PrimaryPropertyName}}.ToArray();
			Assert.AreEqual(count-1, viewModels.Length);

			Assert.IsNotNull(changedItem);
			Assert.AreEqual(changedItem, itemToDelete);
			Assert.AreEqual(NotifyCollectionChangedAction.Remove, changedAction);
			Assert.AreEqual(({{relation.ForeignKeyType}})1, (({{relation.ForeignTable}}ViewModel)changedItem).{{relation.ForeignKey}});
			Assert.AreEqual(0, changedIndex);
		}
		[TestMethod]
		public void ShouldRaiseTableChangedOnChange_RemoveEvent()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.ForeignTable}}ViewModel[] viewModels;
			{{relation.ForeignTable}}ViewModel itemToUpdate;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			#nullable enable
			object? changedItem = null;
			NotifyCollectionChangedAction? changedAction = null;
			#nullable disable
			int changedIndex = -1;
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);
			primaryItem.{{relation.PrimaryPropertyName}}.CollectionChanged += (sender, e) => { changedItem = e.OldItems?[0]; changedAction = e.Action; changedIndex = e.OldStartingIndex; };
			count=primaryItem.{{relation.PrimaryPropertyName}}.Count();

			itemToUpdate = testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.First(item => item.{{relation.ForeignKey}} == primaryItem.{{relation.PrimaryKey}});
			itemToUpdate.{{relation.ForeignKey}} = 2;

			viewModels = primaryItem.{{relation.PrimaryPropertyName}}.ToArray();
			Assert.AreEqual(count-1, viewModels.Length);

			Assert.IsNotNull(changedItem);
			Assert.AreEqual(changedItem, itemToUpdate);
			Assert.AreEqual(NotifyCollectionChangedAction.Remove, changedAction);
			Assert.AreEqual(({{relation.ForeignKeyType}})2, (({{relation.ForeignTable}}ViewModel)changedItem).{{relation.ForeignKey}});
			Assert.AreNotEqual(-1, changedIndex);
		}
		[TestMethod]
		public void ShouldRaiseTableChangedOnAdd()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.ForeignTable}}ViewModel[] viewModels;
			Tables.{{relation.ForeignTable}} itemToAdd;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			#nullable enable
			object? changedItem = null;
			NotifyCollectionChangedAction? changedAction = null;
			#nullable disable
			int changedIndex = -1;
			int count;
			
				testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);
			primaryItem.{{relation.PrimaryPropertyName}}.CollectionChanged += (sender, e) => { changedItem = e.NewItems?[0]; changedAction = e.Action; changedIndex = e.NewStartingIndex; };
			count=primaryItem.{{relation.PrimaryPropertyName}}.Count();

			itemToAdd =  MockDatabase.Create{{relation.ForeignTable}}(({{relation.ForeignKeyType | string.remove_last "?"}})(testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.Count+1));
			itemToAdd.{{relation.ForeignKey}} = 1;
			testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.Add(itemToAdd);

			viewModels = primaryItem.{{relation.PrimaryPropertyName}}.ToArray();
			Assert.AreEqual(count+1, viewModels.Length);

			Assert.IsNotNull(changedItem);
			Assert.AreEqual(NotifyCollectionChangedAction.Add, changedAction);
			Assert.AreEqual(({{relation.ForeignKeyType}})1, (({{relation.ForeignTable}}ViewModel)changedItem).{{relation.ForeignKey}});
			Assert.AreNotEqual(-1, changedIndex);
		}
		[TestMethod]
		public void ShouldRaiseTableChangedOnChange_AddEvent()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.ForeignTable}}ViewModel[] viewModels;
			{{relation.ForeignTable}}ViewModel itemToUpdate;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			#nullable enable
			object? changedItem = null;
			NotifyCollectionChangedAction? changedAction = null;
			#nullable disable
			int changedIndex = -1;
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);
			primaryItem.{{relation.PrimaryPropertyName}}.CollectionChanged += (sender, e) => { changedItem = e.NewItems?[0]; changedAction = e.Action; changedIndex = e.NewStartingIndex; };
			count=primaryItem.{{relation.PrimaryPropertyName}}.Count();

			itemToUpdate = testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.First(item => item.{{relation.ForeignKey}} != primaryItem.{{relation.PrimaryKey}});
			itemToUpdate.{{relation.ForeignKey}} = 1;

			viewModels = primaryItem.{{relation.PrimaryPropertyName}}.ToArray();
			Assert.AreEqual(count+1, viewModels.Length);

			Assert.IsNotNull(changedItem);
			Assert.AreEqual(changedItem, itemToUpdate);
			Assert.AreEqual(NotifyCollectionChangedAction.Add, changedAction);
			Assert.AreEqual(({{relation.ForeignKeyType}})1, (({{relation.ForeignTable}}ViewModel)changedItem).{{relation.ForeignKey}});
			Assert.AreNotEqual(-1, changedIndex);
		}

		[TestMethod]
		public void ShouldGetSetSelectedItem()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.PrimaryPropertyName}}ViewModelCollection collection;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);

			collection = primaryItem.{{relation.PrimaryPropertyName}};
			collection.PropertyChanged += (_, e) => { propertyName = e.PropertyName; };

			Assert.IsNull(collection.SelectedItem);
			collection.SelectedItem = collection.First();
			Assert.IsNotNull(collection.SelectedItem);
			Assert.AreEqual("SelectedItem", propertyName);
		}

		[TestMethod]
		public void ShouldGetCount()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.PrimaryPropertyName}}ViewModelCollection collection;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			
			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);

			collection = primaryItem.{{relation.PrimaryPropertyName}};

			
			count=collection.Count;
						
			Assert.AreEqual(testDatabaseViewModel.{{relation.ForeignTable}}ViewModelCollection.Where(item=>item.{{relation.ForeignKey}}==primaryItem.{{relation.PrimaryKey}}).Count() , count);
		}
				
		[TestMethod]
		public void ShouldGetIndexer()
		{
			{{databaseName}}Model testDatabaseModel;
			{{databaseName}}ViewModel testDatabaseViewModel;
			{{relation.PrimaryPropertyName}}ViewModelCollection collection;
			{{relation.PrimaryTable}}ViewModel primaryItem;
			{{relation.ForeignTable}}ViewModel item;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			
			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			testDatabaseViewModel = new {{databaseName}}ViewModel(testDatabaseModel);

			primaryItem=testDatabaseViewModel.{{relation.PrimaryTable}}ViewModelCollection.ElementAt(0);

			collection = primaryItem.{{relation.PrimaryPropertyName}};

			
			item=collection[0];
						
			Assert.IsNotNull(item);	
			Assert.AreEqual(1, item.{{primaryKey.name}});
		}


	}
	{{-end}}
}