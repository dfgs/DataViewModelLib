{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableUnitTestAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- dto= class | GetDTO }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
//
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}


namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{

		#region {{dto}} table
		{{-if primaryKey}}
		
		[TestMethod]
		public void ShouldAdd{{dto}}()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel[] viewModels;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			// add new item
			testDatabaseModel.Add{{dto}}(MockDatabase.Create{{dto}}({{mockCount+1}}));
			viewModels = testDatabaseViewModel.{{dto}}ViewModelCollection.ToArray();
			
			Assert.AreEqual({{mockCount+1}}, viewModels.Length);
			// check if returned PKs are correct for each item
			for({{primaryKey.type_name}} index=1;index<={{mockCount+1}};index++ )
			{
				Assert.AreEqual(index, viewModels[index-1].{{primaryKey.name}});
			}		
		}
		[TestMethod]
		public void ShouldNotAdd{{dto}}Twice()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel[] viewModels;
			Tables.{{dto}} new{{dto}};

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);

			new{{dto}} = MockDatabase.Create{{dto}}({{mockCount+1}});
			// item should be added once
			testDatabaseModel.Add{{dto}}(new{{dto}});
			viewModels = testDatabaseViewModel.{{dto}}ViewModelCollection.ToArray();
			Assert.AreEqual({{mockCount+1}}, viewModels.Length);
			
			// item should not be added a second time
			testDatabaseModel.Add{{dto}}(new{{dto}});
			viewModels = testDatabaseViewModel.{{dto}}ViewModelCollection.ToArray();
			Assert.AreEqual({{mockCount+1}}, viewModels.Length);
		}

		[TestMethod]
		public void ShouldRaiseCollectionChangedOnAdd()
		{
			ViewModels.TestDatabaseViewModel testDatabaseViewModel;
			Models.TestDatabaseModel testDatabaseModel;
			ViewModels.{{dto}}ViewModel[] viewModels;
			int changedIndex = -1;
			#nullable enable
			ViewModels.{{dto}}ViewModel? changedItem = null;
			System.Collections.Specialized.NotifyCollectionChangedAction? changedAction = null;
			#nullable disable


			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseViewModel = new ViewModels.TestDatabaseViewModel(testDatabaseModel);
			testDatabaseViewModel.{{dto}}ViewModelCollection.CollectionChanged += (sender, e) => { changedItem = e.NewItems?[0] as ViewModels.{{dto}}ViewModel; changedAction = e.Action; changedIndex = e.NewStartingIndex; }; ;

			// add new item
			testDatabaseModel.Add{{dto}}(MockDatabase.Create{{dto}}({{mockCount+1}}));
			viewModels = testDatabaseViewModel.{{dto}}ViewModelCollection.ToArray();

			Assert.AreEqual({{mockCount+1}}, viewModels.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount+1}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(System.Collections.Specialized.NotifyCollectionChangedAction.Add, changedAction);
			Assert.AreEqual({{mockCount}}, changedIndex);

		}

		
		

		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}
		

		#endregion

	}
}
